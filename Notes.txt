🥀 Contact Manager App - React JS 🥀

🌿🥀🌳 Points to Remember 🌳🥀🌿

#1. Array of Objects gets stored inside an Props Object at two Levels.
#2. Reference Variable in JSX.
#3. You can check the localStorage data inside the chrome developer tools of Application > Storage.
#4. Id will be created while adding the New Contact. You will be existing contact using uuid(). Function as a Prop Handlers used to pass data from child to parent component.


🌿🍃🌳🔥🥀 Detailed Explaination of Important Points - Connect the Dots 🥀🔥🌳🍃🌿

✅#1. Prerequisites - Install and Configure Node JS, NPM, NPX & along with Versions.

✅#2. Create a React App - npx create-react-app command & run the app - default development server environment - localhost:3000.

✅#3. React Scripts/Commands - npm start, npm run build (minified version - production deployment build), npm test (test cases) & npm run eject.

✅#4. Explore the App - Files & Folders Structure.

✅#5. Clean up the App - Files & Folders Structure.

✅#6. Create a Directory of Components & Build them.

✅#7. Create a Directory of Assets which includes Images/CSS/Other Static Files and Folders.

✅#8. Create the multiple Components as per the App Layout ==> Header < AddContact < ContactList < ContactCard.

✅#9. Render the "Hello World" in Default App Component.

✅#10. Install & Configure the Material UI Library on place of Semantic UI Library.

✅#11. React Component - Individual piece of reusable code which has it's own functionality, inputs and outputs.

✅#12. HTML vs. JSX:- You can't write HTML in JS File, it's JSX Syntax (HTML + JS) which means embedded { JS } in HTML in the JS Component.

✅#13. React App Component - Create & Structure the multiple Components as per the App Layout - Header < AddContact < ContactList < ContactCard.

✅#14. Design & Build your Header Functional Component with or without Material UI.

✅#15. Design & Build your AddContact Form as Class Component with or without Material UI.
🔥#1. ==> Declare the class component state.
🔥#2. ==> Add the Event Handlers with Callback Functions as Onchange (Input) & OnSubmit (Form).
🔥#3. ==> Set the State of the State Object Keys using this.setState() method.

✅#16. Design & Build your ContactList Functional Component with or without Material UI.

✅#17. Style the App Component with or without Material UI.

✅#18. React Rendering List Items/Elements of Array of Objects using Map Array Iterative Methods, Array Destructing, Props Objects.

🔥#1. ==> Case 1:- Create a Static Array of 2, 3 Objects in Main App Container Component and pass it to child Component using Props Objects as Key/Attribute/Arguments/Property Name.
🥀 This props is a default parameter name.
🥀 props (object) = { contacts (key i.e. Array), __proto__ (key i.e. prototype object)}.
🥀 Call the Reference Variable in JSX, will run the assigned function.

🔥#2. ==> Case 2:- Populate the Contacts State (ArrayofObjects) via AddContact Class Component State and its Events and Functionality.
🥀 Declaring Class State in Class Component.
🥀 Add the Event Handlers with Callback Functions as Onchange (Input) & OnSubmit (Form).

🔥#3. ==> Case 3:- Now, In order to persist the data, even if the page reloads or new session started. we will use the browser localStorage Memory along with useEffect Hook which is having dependency array as contacts.

✅#19. As UI of CardContact is repetative, so Design & Build your ContactCard as Component Separately with or without Material UI.

✅#20. Add the Inline Styling as an object/attribute of style in {{ property: value }} in React or Create the Styling for Each Component.

✅#21. How to Add Images in the JSX Component.

✅🔥⭐️#22. Build the functionality after Setup, Layout & Styling of Components.

✅#23. In order to replace the StaticArrayofObjects, we need to declare the state to store the the objects inside the state array as CONTACTS & will be set using Setter Function of setCONTACTS using React useState Hook.

✅#24. Now, we want to populate our contacts state (ArrayofObjects) declared inside the app component by using the AddContact Class Component State Object, then calling the AddContact (Child) Component Data into App (Parent) Component via Function as Props Method. Also, adding the event and calling function for storing data inside the state object.

✅#25. In order to pass the state from child to parent component, then must function as a prop must be passed from parent to child component. This Function as a Prop must be called inside the add function of AddContact Component.

✅#26. LocalStorage & UseEffect => Now, In order to persist the data, even if the page reloads or new session started. we will use the browser localStorage Memory along with useEffect Hook which is having dependency array as contacts.

✅#27. React.StrictMode is a tool that highlights potential issues in a programme. It works by encapsulating a portion of your full application as a component. StrictMode does not render any visible elements in the DOM in development mode, but it enables checks and gives warnings).

✅#28.  All useEffects run for one time at the time of rendering. So initially your contacts state is [] and you are storing an empty array into localStorage. So to solve it, try adding simple if condition check while storing into localStorage.

✅#29. All useEffects run for one time at the time of rendering. So initially your contacts state is [] and you are storing an empty array into localStorage. So to solve it, try adding simple if condition check while storing into localStorage.

✅#30. Contact Delete Functionality.
🔥#1. ==> In order to delete the contact, we must have a unique id. Each child in a list should have a unique "key" prop.
🔥#2. ==> Install & Import the Package alias as uuid() to generate the UUID => uuidv4.
🔥#3. ==> Declare the id key in object and object destructing of ...contact and set with uuid().
🔥#4. ==> Function as a Prop to getContactId from removeContactHandler function.
🔥#5. ==> Function as a Prop to getContactId from deleteContactHandler from ContactList to ContactCard Component function.

✅🔥⭐️#31. React-Router-DOM Module.
